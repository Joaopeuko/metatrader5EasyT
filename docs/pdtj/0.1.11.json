"{'metatrader5EasyT': {'type': 'directory', 'trade.py': {'type': 'python file', 'Trade': {'introduction': 'This class is responsible to handle all the trade requests.', '__init__': {'introduction': 'It is allowed to have only one position at time per symbol, right now it is not possible to open a position and\\nincrease the size of it or to open opposite position. Open an open position will close the other direction one.\\n\\n', 'args': {'symbol': {'description': '\\n        It is the symbol you want to open or close or check if already have an operation opened.\\n\\n    ', 'type': <class 'str'>, 'default': 'No default argument'}, 'lot': {'description': '\\n        It is how many shares you want to trade, many symbols allow fractions and others requires a\\n        certain amount. It can be 0.01, 100.0, 1000.0, 10000.0.\\n\\n    ', 'type': <class 'float'>, 'default': 'No default argument'}, 'stop_loss': {'description': '\\n        It is how much you accept to lose. Example: If you buy a share for US$10.00, and you accept to lose US$1.00\\n        you set this variable at 1.00, you will be out of the operation at US$9.00 (sometimes more, somtime less,\\n        the US$9.00 is the trigger). Keep in mind that some symbols has different points metrics, US$1.00 sometimes\\n        can be 1000 points.\\n\\n    ', 'type': <class 'float'>, 'default': 'No default argument'}, 'take_profit': {'description': '\\n        It is how much you accept to win. Example: If you buy a share for US$10.00, and you accept to win US$1.00\\n        you set this variable at 1.00, you will be out of the operation at US$11.00 (sometimes more, somtime less,\\n        the US$11.00 is the trigger). Keep in mind that some symbols has different points metrics, US$1.00 sometimes\\n        can be 1000 points.', 'type': <class 'float'>, 'default': 'No default argument'}}}, 'normalize': {'introduction': 'This function normalize the price to ensure a precision that is required by the platform\\n\\n', 'args': {'price': {'description': '\\n        It is the price that you want to be normalized, usually is the last price to open a market position.\\n\\n', 'type': <class 'float'>, 'default': 'No default argument'}}, 'returns': '\\n    It returns the float price normalized under a precision that is accepted by the platform.\\n\\n', 'examples': \"\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> eurusd_trade = Trade(symbol='EURUSD', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> # The normalize function is used inside other functions, but the idea is to normalize the value to\\n    >>> # be accepted in the trade request. If you want to see this function in action you can look at\\n    >>> # open_buy() and open_sell()\\n    >>> eurusd_trade.normalize(12.3456789)\\n    12.34\"}, 'open_buy': {'introduction': 'This functions when called send a buy request to Metatrader5 with the parameters in the attributes.\\n\\n', 'returns': '\\n    It returns None, but if an error occurs when open a position it will break.\\n\\n', 'examples': '\\n\\n    Try this on your demo account with fake money, a position will be opened.\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    True\\n    2022-03-11 04:47:29,903 WARNING - initialize_platform - \"Algotrading\" not allowed! You cannot open position,\\n    but you can retrieve data. If you want to open positions, please, go to Metatrader5 and press the button\\n    \"Algotrading.\"\\n    >>> initialize.initialize_symbol(\\'EURUSD\\')\\n    >>> eurusd_trade = Trade(symbol=\\'EURUSD\\', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> # When I try to open a position and the Algotrading is not allowed on Metatrader5 I got a warning.\\n    >>> eurusd_trade.open_buy()\\n    2022-03-11 04:48:37,068 ERROR - open_buy - Something went wrong: Position Not Found for symbol EURUSD!\\n    Last Error: (1, \\'Success\\')\\n    >>> # But when I allow algotrading, I return None, you can see at Metatrader5 that a buy\\n    position was opened.\\n    >>> eurusd_trade.open_buy()\\n    None\\n    >>> # Just for curiosity, if you want to try to open a sell position with this buy opened you will close\\n    >>> # the buy position\\n    >>> eurusd_trade.open_sell()\\n    None'}, 'open_sell': {'introduction': 'This functions when called send a sell request to Metatrader5 with the parameters in the attributes.\\n\\n', 'returns': '\\n    It returns None, but if an error occurs when open a position it will break.\\n\\n', 'examples': '\\n\\n    Try this on your demo account with fake money, a position will be opened.\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    True\\n    2022-03-11 04:47:29,903 WARNING - initialize_platform - \"Algotrading\" not allowed! You cannot open position,\\n    but you can retrieve data. If you want to open positions, please, go to Metatrader5 and press the button\\n    \"Algotrading.\"\\n    >>> initialize.initialize_symbol(\\'EURUSD\\')\\n    >>> eurusd_trade = Trade(symbol=\\'EURUSD\\', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> # When I try to open a position and the Algotrading is not allowed on Metatrader5 I got a warning.\\n    >>> eurusd_trade.open_sell()\\n    2022-03-11 04:57:08,628 ERROR - open_sell - Something went wrong: Position Not Found for symbol EURUSD!\\n    Last Error: (1, \\'Success\\')\\n    >>> # But when I allow algotrading, I return None, you can see at Metatrader5 that a buy\\n    position was opened.\\n    >>> eurusd_trade.open_sell()\\n    None\\n    >>> # Just for curiosity, if you want to try to open a buy position with this sell opened you will close\\n    >>> # the sell position\\n    >>> eurusd_trade.open_buy()\\n    None'}, 'position_check': {'introduction': \"This function checks if there are a position opened and update the variable self.trade_direction.\\nIf there is no position, the self.trade_direction will be updated to None, else, it updates with the trade\\ndirection, which can be 'sell' or 'buy'.\\n\\n\", 'returns': '\\n    This function update the variable self.trade_direction and do not return a result.\\n\\n', 'examples': \"\\n\\n    Try this on your demo account with fake money, a position will be opened.\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    True\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> eurusd_trade = Trade(symbol='EURUSD', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> eurusd_trade._trade_allowed = True\\n    >>> # Position check it is just to ensure that the eurusd_trade.trade_direction are in the right direction.\\n    >>> # The eurusd_trade.trade_direction is automatically handled by buy open_sell() and open_buy() and\\n    >>> # it returns the trade direction or None when there is no trade opened.\\n    >>> eurusd_trade.trade_direction\\n    None\\n    >>> eurusd_trade.position_open(True, False)\\n    'buy'\\n    >>> eurusd_trade.trade_direction\\n    'buy'\\n    >>> # After I open a buy position, it returns 'buy' to trade_direction, but, what happens if I manually\\n    >>> # change the direction?\\n    >>> eurusd_trade.trade_direction = 'coffee shop'\\n    None\\n    >>> eurusd_trade.trade_direction\\n    'coffee shop'\\n    >>> # It is possible to see that the trade_direction was changed.\\n    >>> # and the position_check() is called in all the functions that opens and closes position\\n    >>> # to ensure that direction is correct, I will call position_check() to fix my change to 'coffee shop'\\n    >>> eurusd_trade.position_check()\\n    None\\n    >>> eurusd_trade.trade_direction\\n    'buy'\\n    >>> # It worked.\\n    >>> # That is it, I will just the position that I opened before.\\n    >>> eurusd_trade.position_close()\"}, 'position_close': {'introduction': 'This functions checks the trade direction, and it opens an opposite position to the current one to close it.\\nIf there is no position nothing happens.\\n\\n', 'returns': '\\n    Close the current position by opening an opposite one.\\n\\n', 'examples': \"\\n\\n    Try this on your demo account with fake money, a position will be opened.\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    True\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> eurusd_trade = Trade(symbol='EURUSD', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> eurusd_trade._trade_allowed = True\\n    >>> # Opening a position with Algotrading allowed and, eurusd_trade._trade_allowed True\\n    >>> # To know more about eurusd_trade._trade_allowed look the Examples in position_open() documentation.\\n    >>> eurusd_trade.position_open(False, True)\\n    'sell'\\n    >>> # When there is a position opened, eurusd_trade.position_close() will open a position in a different\\n    >>> # direction to close it.\\n    >>> eurusd_trade.position_close()\\n    None\\n    # It checks the trading direction, return none when there is no trade opened.\\n    >>> eurusd_trade.trade_direction\\n    None\\n    # I will open a buy position, check the trade direction and close it!\\n    >>> eurusd_trade.position_open(True, False)\\n    'buy'\\n    >>>  eurusd_trade.trade_direction\\n    'buy'\\n    >>> eurusd_trade.position_close()\\n    >>> # We can see that it worked!\\n    >>> # What happens when I call eurusd_trade.position_close() with no position opened?\\n    >>> eurusd_trade.position_close()\\n    None\\n    >>> # Nothing happens, there are no position to be closed.\"}, 'position_open': {'introduction': 'This function receives two bool variables, buy and sell, if one of this variable is true and the other is false,\\nit opens a position to the side that is true, if both variable is true or both variable is false, it does not\\nopen a position.\\n\\n', 'args': {'buy': {'description': '\\n        When buy is TRUE it receives a positive signal to open a position. When false, it is ignored.\\n\\n    ', 'type': <class 'bool'>, 'default': 'No default argument'}, 'sell': {'description': '\\n        When sell is TRUE it receives a positive signal to open a position. When false, it is ignored.\\n\\n', 'type': <class 'bool'>, 'default': 'No default argument'}}, 'returns': '\\n    It opens the position.\\n\\n', 'examples': '\\n\\n    Try this on your demo account with fake money, a position will be opened.\\n\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.trade import Trade\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    True\\n    2022-03-11 04:47:29,903 WARNING - initialize_platform - \"Algotrading\" not allowed! You cannot open position,\\n    but you can retrieve data. If you want to open positions, please, go to Metatrader5 and press the button\\n    \"Algotrading.\"\\n    >>> initialize.initialize_symbol(\\'EURUSD\\')\\n    >>> eurusd_trade = Trade(symbol=\\'EURUSD\\', lot=1.0, stop_loss=1.0, take_profit=1.0)\\n    >>> # When I try to open a position and the Algotrading is not allowed on Metatrader5, return None\\'\\n    >>> eurusd_trade.position_open(True, False)\\n    None\\n    >>> # I allowed Algotrading, but when I try again, I receive None again.\\n    >>> eurusd_trade.position_open(True, False)\\n    None\\n    >>> # That behavior is happening because the attribute eurusd_trade._trade_allowed, is False as default.\\n    >>> eurusd_trade._trade_allowed\\n    False\\n    >>> # This attribute will be handled in another project, that is why it exists.\\n    >>> # Let assign to True and see what happens:\\n    >>> eurusd_trade._trade_allowed = True\\n    >>> eurusd_trade._trade_allowed\\n    True\\n    >>> # Let try to open a position.\\n    >>> eurusd_trade.position_open(True, False)\\n    \\'buy\\'\\n    >>> # It worked, lets try to double the position calling it again\\n    >>> eurusd_trade.position_open(True, False)\\n    \\'buy\\'\\n    >>> # The function returns \\'buy\\', but another position was not opened, it returns the current trade\\n    >>> # direction\\n    >>> # I will call an opposite direction to see what happens:\\n    >>> eurusd_trade.position_open(False, True)\\n    \\'buy\\'\\n    >>> # The function returns \\'buy\\', the position was not closed by trying to open another one in the opposite\\n    >>> # direction. No new position was opened, and it returns the current trade direction.\\n    >>> # I will close this position with eurusd_trade.position_close(), you can check what it does in the\\n    >>> # function documentation position_close()\\n    >>> eurusd_trade.position_close()\\n    None\\n    >>> # To finish, let see what happens if both arguments are True\\n    >>> eurusd_trade.position_open(True, True)\\n    None\\n    >>> # Nothing happens, but when both are False?\\n    >>> eurusd_trade.position_open(False, False)\\n    None\\n    >>> # Nothing happens'}}}, 'tick.py': {'type': 'python file', 'Tick': {'introduction': 'Tick class is the responsible to retrieve every tick information.', '__init__': {'args': {'symbol': {'description': '\\n    It is the symbol you want information about. You can have information about time, bid, ask, last, volume.', 'type': <class 'str'>, 'default': 'No default argument'}}}, 'change_symbol': {'introduction': 'This function changes the symbol.\\n\\n', 'args': {'new_symbol': {'description': '\\n        It receives the new symbol\\n\\n', 'type': <class 'str'>, 'default': 'No default argument'}}, 'returns': '\\n    It updates the self._symbol to the new symbol.'}, 'get_new_tick': {'introduction': 'Everytime this function is called it update the last tick information, it is important to have update\\ninformation know the most recent information.\\n\\n', 'returns': '\\n     It updates the attributes in the constructor.\\n\\n', 'examples': \"\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.tick import Tick\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> # It will return the most recent information, but it will return None at the first time.\\n    >>> # The tick need the information to be updated everytime.\\n    >>> eurusd_tick = Tick(symbol='EURUSD')\\n    >>> eurusd_tick.ask\\n    None\\n    >>> # When you update the tick:\\n    >>> eurusd_tick.get_new_tick()\\n    >>> eurusd_tick.ask\\n    1.09975\\n    >>> eurusd_tick.bid\\n    1.09975\\n    >>> # You must have notice that I used bid and ask, some exchanges do not return the last value\\n    >>> # You can find only the information for bid and ask. If you try to return last it will print 0.0.\\n    >>> # But remember, not all the exchanges do that, you must check it.\\n    >>> eurusd_tick.last\\n    0.0\\n\\n    You can ask for this information: time, bid, ask, last, volume.\"}}, 'datetime': {'introduction': 'datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\\n\\nThe year, month and day arguments are required. tzinfo may be None, or an\\ninstance of a tzinfo subclass. The remaining arguments may be ints.'}}, 'rates.py': {'type': 'python file', 'Rates': {'introduction': 'This class is responsible to retrieve a certain amount of previous data.', '__init__': {'args': {'symbol': {'description': '\\n    The symbol you want to retrieve previous data.\\n\\n', 'type': <class 'str'>, 'default': 'No default argument'}, 'timeframe': {'description': '\\n    The timeframe you want information, like 1 minute, 5 minute, 1 week. You can find all the timeframe\\n    available in the TimeFrame Class (metatrader5EasyT.timeframe).\\n\\n', 'type': <class 'metatrader5EasyT.timeframe.TimeFrame'>, 'default': 'No default argument'}, 'count': {'description': '\\n    It is the amount of information in the past you want. If your time frame is 5 minutes and your count is 4,\\n    it will return 4 values containing time, open, high, low, close, tick_volume information of this past 4\\n    candlesticks.', 'type': <class 'int'>, 'default': 'No default argument'}}}, 'change_count': {'introduction': 'This function changes the count.\\n\\n', 'args': {'new_count': {'description': '\\n        It receives the new new_count\\n\\n', 'type': <class 'int'>, 'default': 'No default argument'}}, 'returns': '\\n    It updates the self._count to the new count.\\n\\n', 'examples': \"\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.timeframe import TimeFrame\\n    >>> from metatrader5EasyT.rates import Rates\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> timeframe = TimeFrame()\\n    >>> # it will get the last 20 one minute candlestick information.\\n    >>> eurusd_rates = Rates(symbol='EURUSD', timeframe=timeframe.ONE_MINUTE, count=20)\\n    >>> eurusd_rates.update_rates()\\n    >>> len(eurusd_rates.close)\\n    20\\n    >>> # When you change the count, you need to update the information, and you can see that it worked.\\n    >>> eurusd_rates.change_count(5)\\n    >>> eurusd_rates.update_rates()\\n    >>> len(eurusd_rates.close)\\n    5\\n\\n    You can ask for this information: time, open, high, low, close, tick_volume.\"}, 'change_symbol': {'introduction': 'This function changes the symbol.\\n\\n', 'args': {'new_symbol': {'description': '\\n        It receives the new symbol\\n\\n', 'type': <class 'str'>, 'default': 'No default argument'}}, 'returns': '\\n    It updates the self._symbol to the new symbol.'}, 'change_timeframe': {'introduction': 'This function changes the timeframe.\\n\\n', 'args': {'new_timeframe': {'description': '\\n        It receives the new timeframe\\n\\n', 'type': <class 'metatrader5EasyT.timeframe.TimeFrame'>, 'default': 'No default argument'}}, 'returns': '\\n    It updates the self._timeframe to the new timeframe.'}, 'update_rates': {'introduction': 'Everytime this function is called it update the last values, it is important to have update information to\\ncalculate indicators and ensure your trading strategy is working properly.\\n\\n', 'returns': '\\n    It updates the attributes in the constructor.\\n\\n', 'examples': \"\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> from metatrader5EasyT.timeframe import TimeFrame\\n    >>> from metatrader5EasyT.rates import Rates\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    >>> timeframe = TimeFrame()\\n    >>> initialize.initialize_symbol('EURUSD')\\n    >>> # it will get the last 20 one minute candlestick information, but it will return none at the first time.\\n    >>> # the rates need the information to be updated everytime.\\n    >>> eurusd_rates = Rates(symbol='EURUSD', timeframe=timeframe.ONE_MINUTE, count=20)\\n    >>> # The first time, if you try to get a rates information of the close price you will receive None\\n    >>> eurusd_rates.close\\n    None\\n    >>> # But when you update the rates, the prices will be updated.\\n    >>> eurusd_rates.update_rates()\\n    >>> # And the rates will be returned for the information you want.\\n    >>> eurusd_rates.close\\n    array([1.10324, 1.10342, 1.10329, 1.10338, 1.10294, 1.10238, 1.10188,\\n    1.10186, 1.10221, 1.10172, 1.1013 , 1.10069, 1.10097, 1.10104,\\n    1.10081, 1.1003 , 1.10036, 1.10147, 1.10068, 1.10072])\\n\\n    You can ask for this information: time, open, high, low, close, tick_volume.\"}}, 'TimeFrame': {'introduction': 'There are incompatibilities and different patterns in writing the timeframe between platforms.\\nThis class attend to reduce the chance of errors providing the same timeframe structure between platforms.\\n\\n', 'examples': '\\n    You can find an example of the TimeFrame usage in update_rates() function in Rates documentation', '__init__': {'introduction': 'Initialize self.  See help(type(self)) for accurate signature.'}}}, 'timeframe.py': {'type': 'python file', 'TimeFrame': {'introduction': 'There are incompatibilities and different patterns in writing the timeframe between platforms.\\nThis class attend to reduce the chance of errors providing the same timeframe structure between platforms.\\n\\n', 'examples': '\\n    You can find an example of the TimeFrame usage in update_rates() function in Rates documentation', '__init__': {'introduction': 'Initialize self.  See help(type(self)) for accurate signature.'}}}, 'initialization.py': {'type': 'python file', 'Initialize': {'introduction': 'This class ensure that the platform are working properly.\\nIf it is connected on the internet, and if the symbol that you are trying to use exists or was not mistyped.', '__init__': {'introduction': 'Initialize the constructor and set the _log.'}, 'initialize_platform': {'introduction': 'This function is responsible to initialize the platform that will be used to trade.\\n\\n', 'raises': '\\n    PlatformNotInitialized:\\n        Raise this error when the Metatrader5 is not installed or not possible to load\\n        it for some reason.\\n\\n', 'returns': '\\n    It returns true if initialized else return false.\\n\\n', 'examples': '\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> initialize = Initialize()\\n    >>> # The function and the function return:\\n    >>> initialize.initialize_platform()\\n    True'}, 'initialize_symbol': {'introduction': 'This function is responsible to initialize as many symbols as you want.\\n\\n', 'args': {}, 'raises': '\\n    SymbolNotFound: If not possible to initialize the symbol raises this error.\\n\\n', 'returns': '\\n    When the symbol is successfully initialized it returns True and, it updates the list\\n    self.symbol_initialized if you want to work with the symbols correctly initialized.\\n\\n', 'examples': \"\\n    >>> # All the code you need to execute the function:\\n    >>> from metatrader5EasyT.initialization import Initialize\\n    >>> initialize = Initialize()\\n    >>> initialize.initialize_platform()\\n    >>> # The function and the function return:\\n    >>> initialize.initialize_symbol('EURUSD')\\n    True\\n    >>> # Check initialize.symbol_initialized to see the list of initialized symbols\\n    ['EURUSD']\"}}, 'PlatformNotInitialized': {'introduction': 'Raise this error when the Metatrader5 is not installed or not possible to load it for some reason.'}, 'SymbolNotFound': {'introduction': 'Raise this error when the symbol is not found.'}}, 'shelve': 'finance', 'sub-project': 'easyT'}}"
